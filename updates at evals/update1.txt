(function() {
    const runButton = document.getElementById('runBenchmarkBtn');
    if (!runButton) return alert("Run button not found.");

    runButton.onclick = async function() {
        const testDurationSeconds = 10;
        const numRuns = 10;
        const runsToDiscardStart = 2;
        const runsToDiscardEnd = 2;

        const app = window.app;
        if (!app) return alert("BenchmarkApp not found.");

        const subjects = app._state.subjects.filter(s => document.querySelector(`input[name="subject"][value="${s.id}"]`)?.checked);
        if (subjects.length < 1) return alert("Please select at least one version to test.");

        const resultsContainer = document.getElementById('resultsContainer');
        runButton.disabled = true;
        resultsContainer.innerHTML = `<h3>Multi-Run Stress Test (${numRuns} runs of ${testDurationSeconds}s each)</h3>`;

        for (const subject of subjects) {
            const runResultsHz = [];
            
            for (let run = 0; run < numRuns; run++) {
                resultsContainer.innerHTML += `<p>Running ${subject.name} (Run ${run + 1}/${numRuns})...</p>`;
                await new Promise(resolve => setTimeout(resolve, 50));

                try {
                    subject.reset();
                    subject.func(1, 1);

                    const debugStateVar = 'debuglogs' + subject.id.replace('log', '');
                    const debugState = window[debugStateVar];
                    if (!debugState || !debugState[1000]) throw new Error("Logger state not found.");

                    const startCount = debugState[1000][0] || 0;
                    const startTime = performance.now();
                    const endTime = startTime + testDurationSeconds * 1000;
                    let i = 0;

                    while (performance.now() < endTime) {
                        for (let j = 0; j < 1000; j++) {
                            subject.func(1, (i++ % 63) + 1);
                        }
                    }

                    const totalTimeMs = performance.now() - startTime;
                    const endCount = debugState[1000][0] || 0;
                    const totalCalls = endCount - startCount;
                    const avgHz = totalCalls / (totalTimeMs / 1000);
                    runResultsHz.push(avgHz);
                    
                    const lastP = resultsContainer.querySelector('p:last-child');
                    if(lastP) lastP.innerHTML = `Finished ${subject.name} (Run ${run + 1}): ${avgHz.toLocaleString('en-US', {maximumFractionDigits: 0})} Hz`;

                } catch (e) {
                    runResultsHz.push(0);
                    const lastP = resultsContainer.querySelector('p:last-child');
                    if(lastP) lastP.innerHTML = `<span class="slow">FAILED ${subject.name} (Run ${run + 1}): ${e.message}</span>`;
                }
            }

            const runsToAverage = runResultsHz.slice(runsToDiscardStart, numRuns - runsToDiscardEnd);
            const averageHz = runsToAverage.length > 0 ? runsToAverage.reduce((sum, val) => sum + val, 0) / runsToAverage.length : 0;
            
            const resultHtml = `
                <div class="summary-line">
                    <strong>${subject.name} (Avg of middle ${runsToAverage.length} runs):</strong>
                    <span class="fast">${averageHz.toLocaleString('en-US', {maximumFractionDigits: 0})} Hz</span>
                </div>
            `;
            resultsContainer.innerHTML += resultHtml;
        }

        resultsContainer.innerHTML += "<p>Stress test complete.</p>";
        runButton.disabled = false;
    };

    alert("Run Benchmark button reprogrammed for a 10x10s stress test (avg of middle 6). Click it to begin.");
})();
